# ARSLOAD deployment configuration
image:
  # -- Defines the URL address of the QAR REST API server image stored in a container repository.
  name: registry.sptcloud.com/qar/ondemand
  # -- Overrides tag specified by the `appVersion` in the chart file.
  tag: 10.5.0.5-oracle-ubi-8.7-1112
  # -- QAR REST API image pull policy [Always|IfNotPresent].
  pullPolicy: IfNotPresent

# -- Time interval in seconds to sleep (arsload command defaults to 600)
timeInterval: 600

# -- List of arsload deployment instances (one replica per input volume).
instances:
  # - name: folder1
  #   # -- Name of an existing PVC to use (required).
  #   existingClaim: "folder1-pvc"
  #   # -- The path the volume will be mounted at in the ARSLOAD container.
  #   # Defaults to /opt/qar/data/load.
  #   mountPath: /opt/qar/data/load

# -- QAR component designation.
role: arsload

# -- Enter the name of an existing service account to use. Otherwise, one will be created by default.
existingServiceAccount: ""

# -- Provides the ability to customize the deployment using Kubernetes annotations.
podAnnotations: {}

# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsUser: 1001
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems.
  fsGroup: 1001
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  #  runAsNonRoot: true

# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
securityContext:
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged.
  privileged: false
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation.
  allowPrivilegeEscalation: false
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsUser: 1001
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities.
  runAsGroup: 1001
  # -- The default (recommended) configuration prohibits all Linux capabilities.
  capabilities:
    drop:
      - all

# Learn about liveness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
# Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
livenessProbe:
  # -- Initial delay before probing liveness
  initialDelaySeconds: 5
  # -- Period in seconds between liveness checks
  periodSeconds: 30
  # -- Timeout in seconds for liveness checks
  timeoutSeconds: 1
  # -- Number of consecutive negative tests before declaring failure
  failureThreshold: 5
  # -- Number of consecutive positive tests before counting it as a success
  successThreshold: 1

# Learn about readiness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
# Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
readinessProbe:
  # -- Initial delay before probing readiness
  initialDelaySeconds: 10
  # -- Period in seconds between readiness checks
  periodSeconds: 30
  # -- Timeout in seconds for readiness checks
  timeoutSeconds: 1
  # -- Number of consecutive negative tests before declaring failure
  failureThreshold: 5
  # -- Number of consecutive positive tests before counting it as a success
  successThreshold: 1

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
