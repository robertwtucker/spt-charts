{{- if .Values.global.arsload.enabled -}}
{{- range .Values.arsload.instances }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "qar.applicationName" $ }}-arsload-{{ .name }}
  namespace: {{ $.Release.namespace | quote }}
  labels:
    {{- include "qar.labels" $ | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "qar.labels" $ | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
    {{- with $.Values.arsload.podAnnotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "qar.labels" $ | nindent 8 }}
      name: {{ include "qar.applicationName" $ }}-ondemand-template
    spec:
      securityContext:
        {{- toYaml $.Values.arsload.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ include "qar.serviceAccountName" $ }}
  {{- if $.Values.global.imagePullSecrets }}
      imagePullSecrets:
    {{- range $.Values.global.imagePullSecrets }}
      - name: {{ . }}
    {{- end }}
  {{- end }}
      initContainers:
      - name: {{ include "qar.applicationName" $ }}-arsload-stash-init
        image: "{{ $.Values.image.name }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        args:
        - "sh"
        - "-c"
        - "${QAR_HOME}/scripts/init-stash-file.sh"
        env:
          {{ include "ondemand.env.user" $ | nindent 8 }}
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
      containers:
      - name: {{ include "qar.applicationName" $ }}-arsload-{{ .name }}
        securityContext:
          {{- toYaml $.Values.arsload.securityContext | nindent 10 }}
        image: "{{ $.Values.image.name }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        args: [start, arsload]
        env:
          {{ include "ondemand.env.arsload" $ | nindent 8 }}
        - name: ARSLOAD_DIRECTORY
          value: {{ .mountPath | default "/opt/qar/data/load"}}
        livenessProbe:
          exec:
            command: ["ps", "-p", "1"]
          initialDelaySeconds: {{ $.Values.arsload.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.arsload.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.arsload.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ $.Values.arsload.livenessProbe.failureThreshold }}
          successThreshold: {{ $.Values.arsload.livenessProbe.successThreshold }}
        readinessProbe:
          exec:
            command: ["/bin/bash", "-c", "ps -p $(cat /tmp/qar/run/od.pid)"]
          initialDelaySeconds: {{ $.Values.arsload.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ $.Values.arsload.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ $.Values.arsload.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ $.Values.arsload.readinessProbe.failureThreshold }}
          successThreshold: {{ $.Values.arsload.readinessProbe.successThreshold }}
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
        - name: load
          mountPath: {{ .mountPath | default "/opt/qar/data/load"}}
      volumes:
      - name: work
        emptyDir: {}
      - name: load
        persistentVolumeClaim:
          claimName: {{ .existingClaim }}
{{- end }}
{{- end -}}
