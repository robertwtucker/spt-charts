apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "qar.applicationName" . }}-ondemand
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "qar.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "ondemand.svc.headless" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "qar.labels" . | nindent 6 }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
      {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "qar.labels" . | nindent 8 }}
      name: {{ include "qar.applicationName" . }}-ondemand-template
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ include "qar.serviceAccountName" . }}
  {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
    {{- range .Values.global.imagePullSecrets }}
      - name: {{ . }}
    {{- end }}
  {{- end }}
      initContainers:
      - name: {{ include "qar.applicationName" . }}-ondemand-stash-init
        image: "{{ .Values.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: IfNotPresent
        args:
        - "sh"
        - "-c"
        - "${QAR_HOME}/scripts/init-stash-file.sh"
        env:
          {{ include "ondemand.env.init" . | nindent 8 }}
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
      {{- if .Values.global.restapi.enabled }}
      - name: {{ include "qar.applicationName" . }}-ondemand-restapi-init
        image: "{{ .Values.restapi.image.name }}:{{ .Values.restapi.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.restapi.imagePullPolicy }}
        args:
        - "sh"
        - "-c"
        - "${QAR_HOME}/scripts/generate-rest-config.sh"
        env:
          {{ include "ondemand.env.restapi" . | nindent 8 }}
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: odpool
          mountPath: /opt/qar/config/rest/odpool
        - name: restcfg
          mountPath: /opt/qar/tmp/restcfg
      {{- end }}
      {{- if .Values.global.fts.enabled }}
      - name: {{ include "qar.applicationName" . }}-ondemand-fts-init
        image: "{{ .Values.fts.image.name }}:{{ .Values.fts.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.restapi.imagePullPolicy }}
        args: ["init"]
        volumeMounts:
          - name: work
            mountPath: /opt/qar/tmp
      {{- end }}
      - name: {{ include "qar.applicationName" . }}-ondemand-wait-db
        image: "{{ .Values.k8sWaitFor.image.name }}:{{ .Values.k8sWaitFor.image.tag }}"
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lrole=oracledb"
      containers:
      - name: {{ include "qar.applicationName" . }}-ondemand-library
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ .Values.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args: [start, library]
        env:
        - name: ARS_HOST
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ARS_NUM_DBSRVR
          value: {{ .Values.db.numSubServers | quote }}
        - name: ARS_PORT
          value: {{ .Values.service.nodePorts.ondemand | quote }}
        - name: ARS_SRVR_INSTANCE
          value: {{ include "ondemand.serverInstanceName" . }}
        - name: ARS_STORAGE_MANAGER
          value: {{ .Values.storageManager }}
        - name: ENABLE_TRACE
          value: {{ printf "%t" .Values.trace.enabled | quote }}
        - name: OD_INSTANCE_NAME
          value: {{ .Values.odInstanceName }}
        {{ include "ondemand.env.database" . | nindent 8 }}
        ports:
        - name: ars-listener
          containerPort: 1445
        livenessProbe:
          exec:
            command: ["ps", "-p", "1"]
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
        readinessProbe:
          exec:
            command: ["sh", "-c", "${OD_HOME}/bin/arssockd -h ${OD_INSTANCE_NAME} -P | grep -q Okay"]
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
        - name: data
          mountPath: /opt/qar/data
      {{- if .Values.global.restapi.enabled }}
      - name: {{ include "qar.applicationName" . }}-ondemand-restapi
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ .Values.restapi.image.name }}:{{ .Values.restapi.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.restapi.imagePullPolicy }}
        ports:
          - name: http
            containerPort: 9080
        livenessProbe:
          tcpSocket:
            port: 9080
          initialDelaySeconds: {{ .Values.restapi.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.restapi.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.restapi.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.restapi.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.restapi.livenessProbe.successThreshold }}
        readinessProbe:
          httpGet:
            path: /qar/v1/documentation
            port: 9080
            scheme: HTTP
          initialDelaySeconds: {{ .Values.restapi.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.restapi.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.restapi.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.restapi.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.restapi.readinessProbe.successThreshold }}
        volumeMounts:
          - name: odpool
            mountPath: /opt/qar/config/rest/odpool
          - name: restcfg
            mountPath: /opt/qar/tmp/restcfg
      {{- end}}
      {{- if .Values.global.arsload.enabled }}
      - name: {{ include "qar.applicationName" . }}-ondemand-arsload
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ .Values.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        args: [start, arsload]
        env:
          {{ include "ondemand.env.arsload" . | nindent 8 }}
        livenessProbe:
          exec:
            command: ["ps", "-p", "1"]
          initialDelaySeconds: {{ .Values.arsload.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.arsload.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.arsload.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.arsload.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.arsload.livenessProbe.successThreshold }}
        readinessProbe:
          exec:
            command: ["/bin/bash", "-c", "ps -p $(cat /tmp/qar/run/od.pid)"]
          initialDelaySeconds: {{ .Values.arsload.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.arsload.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.arsload.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.arsload.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.arsload.readinessProbe.successThreshold }}
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
        {{- if .Values.arsload.persistence.enabled }}
        - name: load
          mountPath: {{ .Values.arsload.persistence.mountPath }}
        {{- end }}
      {{- end}}
      {{- if .Values.global.fts.enabled }}
      - name: {{ include "qar.applicationName" . }}-ondemand-fts
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ .Values.fts.image.name }}:{{ .Values.fts.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.fts.imagePullPolicy }}
        ports:
          - name: http
            containerPort: 8191
        livenessProbe:
          exec:
            command: ["ps", "-p", "1"]
          initialDelaySeconds: {{ .Values.fts.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.fts.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.fts.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.fts.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.fts.livenessProbe.successThreshold }}
        readinessProbe:
          tcpSocket:
            port: 8191
          initialDelaySeconds: {{ .Values.fts.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.fts.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.fts.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.fts.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.fts.readinessProbe.successThreshold }}
        volumeMounts:
          - name: work
            mountPath: /opt/qar/tmp
      {{- end }}
      volumes:
      - name: work
        emptyDir: {}
  {{- if .Values.global.restapi.enabled }}
      - name: restcfg
        emptyDir: {}
  {{- end }}
  {{- if and .Values.global.arsload.enabled .Values.arsload.persistence.enabled }}
    {{- if .Values.arsload.persistence.existingClaim }}
      - name: load
        persistentVolumeClaim:
          claimName: {{ tpl .Values.arsload.persistence.existingClaim $ }}
    {{- end}}
  {{- end}}
  {{- if or .Values.persistence.enabled .Values.ondemand.restapi.persistence.enabled }}
    {{- if .Values.global.restapi.enabled }}
      {{- if and .Values.restapi.persistence.enabled .Values.restapi.persistence.existingClaim }}
      - name: odpool
        persistentVolumeClaim:
          claimName: {{ tpl .Values.restapi.persistence.existingClaim $ }}
      {{- else if not .Values.restapi.persistence.enabled }}
      - name: odpool
        emptyDir: {}
      {{- end }}
    {{- end }}
    {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
      - name: data
        persistentVolumeClaim:
          claimName: {{ tpl .Values.persistence.existingClaim $ }}
    {{- else if not .Values.persistence.enabled  }}
      - name: data
        emptyDir: {}
    {{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        {{ include "qar.labels" . | nindent 8 }}
      {{- with .Values.persistence.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      accessModes:
      {{- range .Values.persistence.accessModes }}
      - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      selector:
        matchLabels:
          {{ include "qar.labels" . | nindent 10 }}
      {{ if and .Values.global.restapi.enabled .Values.restapi.persistence.enabled }}
  - metadata:
      name: odpool
      labels:
        {{ include "qar.labels" . | nindent 8 }}
      {{- with .Values.restapi.persistence.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      accessModes:
      {{- range .Values.restapi.persistence.accessModes }}
      - {{ . | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.restapi.persistence.size }}
      selector:
        matchLabels:
          {{ include "qar.labels" . | nindent 10 }}
      {{- end }}
    {{- end }}
  {{- end }}
