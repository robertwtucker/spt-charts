apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "oracledb.fullname" . }}
  labels:
    {{- include "oracledb.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ include "oracledb.fullname" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "oracledb.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "oracledb.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "oracledb.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- if .Values.credentials.secretName }}
            - name: ORACLE_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.credentials.secretName }}
                  key: "password"
          {{- else }}
            - name: ORACLE_PWD
              value: "{{ .Values.credentials.password }}"
          {{- end }}
          ports:
            - containerPort: 1521
              name: listener
              protocol: TCP
            - containerPort: 5500
              name: emexpress
              protocol: TCP
          readinessProbe:
            exec:
              command: [ "/bin/sh", "-c", "if [ -f $ORACLE_BASE/checkDBLockStatus.sh ]; then $ORACLE_BASE/checkDBLockStatus.sh ; else $ORACLE_BASE/checkDBStatus.sh; fi " ]
            initialDelaySeconds: 20
            periodSeconds: 40
            timeoutSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          {{- if .Values.shmVolume.enabled }}
            - name: dshm
              mountPath: "/dev/shm"
          {{- end }}
          {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath | quote }}
          {{- end }}
            - name: setup
              mountPath: "/opt/oracle/scripts/setup"
      volumes:
      {{- if .Values.shmVolume.enabled }}
        - name: dshm
          emptyDir:
            medium: Memory
          {{- if .Values.shmVolume.sizeLimit }}
            sizeLimit: {{ .Values.shmVolume.sizeLimit }}
          {{- end}}
      {{- end}}
      {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ tpl .Values.persistence.existingClaim $ }}
      {{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
      {{- else }}
        - name: data
          persistentVolumeClaim:
            claimName: data-{{ include "oracledb.fullname" . }}
      {{- end }}
        - name: setup
          configMap:
            name: setup-{{ include "oracledb.fullname" . }}
