# Oracle chart values
image:
  # -- Defines the URL address of the Oracle database image stored in a Docker image repository.
  name: container-registry.oracle.com/database/express
  # -- Overrides the image tag. Defaults to the chart's appVersion.
  tag: ""
  # -- Defines the Oracle database image pull policy. [IfNotPresent|Always].
  pullPolicy: IfNotPresent

# -- The Oracle database SID that should be used (EE/SE default: ORCLCDB, XE preset: XE).
sid: ""
# -- The Oracle database PDB name that should be used (EE/SE default: ORCLPDB1, XE preset: XEPDB1).
pdb: ""
# -- The character set to use when creating the database (default: AL32UTF8)
characterSet: ""
# -- The username is always SYS unless using an Autonomous Database (change to `ADMIN`)
username: SYS
# -- Defines (in plain text) the password of the SYS database user.
# Use the 'passwordSource' variable instead to define the password using a Secret.
password: ""
# -- Use a Secret to define the password of the SYS database user.
passwordSource:
  useSecret: false
  secretName: ""
  secretKey: ""

# -- QAR component designation.
role: oracledb

# -- Enter the name of an existing service account to use. Otherwise, one will be created by default.
existingServiceAccount: ""

# -- Provides the ability to customize the deployment using Kubernetes annotations.
podAnnotations: {}

podSecurityContext:
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsUser: 54321
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems.
  fsGroup: 54321
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsNonRoot: true

securityContext:
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems.
  readOnlyRootFilesystem: false
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged.
  privileged: false
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation.
  allowPrivilegeEscalation: false
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsUser: 54321
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsGroup: 54321
  # -- Learn about this setting at https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities.
  # -- The default (recommended) configuration prohibits all Linux capabilities.
  capabilities:
    drop:
      - all

# -- Defines the number of Oracle database nodes to be deployed at launch.
replicaCount: 1

service:
  # -- Provide any additional annotations which may be required.
  annotations: {}
  # -- Defines the value for the Kubernetes service object [ClusterIP|LoadBalancer].
  type: ClusterIP
  # Node ports to expose
  # NOTE: choose port between <30000-32767>
  # ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  nodePorts:
    # -- Node port for the Oracle database
    oracledb: ""
    # -- Node port for EM Express
    emexpress: ""

# Learn about liveness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
# Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
livenessProbe:
  # -- Defines the delay before the Oracle database container liveness probe is initiated.
  initialDelaySeconds: 90
  # -- Defines how often to perform the Oracle database container probe.
  periodSeconds: 10
  # -- Defines when the Oracle database container probe times out.
  timeoutSeconds: 5
  # -- Defines the minimum consecutive failures for the Oracle database container probe to be considered failed after having succeeded.
  failureThreshold: 5
  # -- Defines the minimum consecutive successes for the Oracle database container probe to be considered successful after having failed.
  successThreshold: 1

# Learn about readiness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
# Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
readinessProbe:
  # -- Defines the delay before the Oracle database container readiness probe is initiated.
  initialDelaySeconds: 40
  # -- Defines how often to perform the Oracle database container probe.
  periodSeconds: 20
  # -- Defines when the Oracle database container probe times out.
  timeoutSeconds: 10
  # -- Defines the minimum consecutive failures for the Oracle database container probe to be considered failed after having succeeded.
  failureThreshold: 5
  # -- Defines the minimum consecutive successes for the Oracle database container probe to be considered successful after having failed
  successThreshold: 1

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 2
  #   memory: 6Gi
  #   ephemeral-storage: 8Gi
  # requests:
  #   cpu: 500m
  #   ephemeral-storage: 6Gi

ingress:
  # -- Enables Ingress, a Kubernetes API object that provides external access and load balancing.
  enabled: false
  # -- Provide any additional annotations which may be required.
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Defines the host(s) for this Ingress.
  hosts:
    - host: ""
  # -- Defines the TLS-enabled host(s) and options.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

persistence:
  # -- Enable Oracle data persistence using a PVC.
  enabled: true
  # -- Name of an existing PVC to use.
  existingClaim: ""
  # -- The path the volume will be mounted at.
  mountPath: /opt/oracle/oradata
  # -- If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning.
  # If undefined (the default) or set to null, no storageClassName spec is
  # set, choosing the default provisioner. (gp2 on AWS, standard on GKE, AWS & OpenStack)
  storageClass: ""
  # -- PVC Access Mode for the Oracle data volume.
  accessModes:
    - ReadWriteOnce
  # -- PVC Storage Request for the Oracle data volume.
  size: 8Gi
  # -- Additional annotations, as required.
  annotations: {}
  # -- Additional labels, as required.
  labels: {}

# Start Oracle pod(s) without limitations on shm memory.
# By default docker and containerd (and possibly other container runtimes) limit `/dev/shm` to `64M`
shmVolume:
  # -- Enable emptyDir volume for /dev/shm for Oracle pod(s)
  enabled: false
  # -- Set this to enable a size limit on the shm tmpfs.
  # Note: the size of the tmpfs counts against container's memory limit
  # e.g:
  # sizeLimit: 1Gi
  sizeLimit: ""
