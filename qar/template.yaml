---
# Source: qar/charts/oracledb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qar-oracledb
  namespace: "default"
  labels:
    app.kubernetes.io/name: oracledb
    helm.sh/chart: oracledb-0.2.0
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: oracledb
---
# Source: qar/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qar
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
---
# Source: qar/charts/oracledb/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: qar-oracledb
  namespace: "default"
  labels:
    app.kubernetes.io/name: oracledb
    helm.sh/chart: oracledb-0.2.0
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: oracledb
data:
  password: UGFzc3dvcmQx
---
# Source: qar/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: qar-ondemand
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
data:
  pdbArchiveName: YXJjaGl2ZQ==
  dbUsername: YXJjaGl2ZQ==
  dbPassword: N0F3QnRBbzRLZUtIdThZUGY0UExTdGVkS2VGUTlD
  odUsername: YWRtaW4=
  odPassword: UGFzc3dvcmQxMjM0NSo=
  username: YWRtaW4=
  password: UGFzc3dvcmQxMjM0NSo=
  restUsername: YWRtaW4=
  restPassword: UGFzc3dvcmQxMjM0NSo=
---
# Source: qar/templates/db-init-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: qar-db-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
data:
  01-patch-listener.sh: |
    #!/bin/sh

    echo "** Patching Oracle-Net Listener -> legacy client compatibility for CMOD"
    echo "USE_SID_AS_SERVICE_listener=on" >> /opt/oracle/homes/OraDB21Home1/network/admin/listener.ora
    lsnrctl reload
    echo "** Done."
  02-create-archive-pdb.sql: |
    CREATE PLUGGABLE DATABASE archive
    ADMIN USER admin IDENTIFIED BY "password12345*"
    FILE_NAME_CONVERT=('/opt/oracle/oradata/ORCLCDB/pdbseed','/opt/oracle/oradata/ORCLCDB/archive');
  03-open-archive-pdb.sql: |
    ALTER PLUGGABLE DATABASE archive OPEN READ WRITE;
  04-save-archive-pdb.sql: |
    ALTER PLUGGABLE DATABASE archive SAVE STATE;
  05-create-navigator-pdb.sql: |
    CREATE PLUGGABLE DATABASE navigator
    ADMIN USER admin IDENTIFIED BY "password12345*"
    FILE_NAME_CONVERT=('/opt/oracle/oradata/ORCLCDB/pdbseed','/opt/oracle/oradata/ORCLCDB/navigator');
  06-open-navigator-pdb.sql: |
    ALTER PLUGGABLE DATABASE navigator OPEN READ WRITE;
  07-save-navigator-pdb.sql: |
    ALTER PLUGGABLE DATABASE navigator SAVE STATE;
  08-archive-grant-perms.sql: |
    ALTER SESSION SET CONTAINER = archive;

    --
    -- Create Content Manager OnDemand role : ONDEMAND
    --
    DROP ROLE ONDEMAND;
    CREATE ROLE ONDEMAND;
    -- Database
    grant SELECT ANY DICTIONARY to ONDEMAND;
    -- Session
    grant CREATE SESSION to ONDEMAND;
    -- Tablespaces
    grant CREATE TABLESPACE to ONDEMAND;
    grant DROP TABLESPACE to ONDEMAND;
    -- Tables
    grant ALTER ANY TABLE to ONDEMAND;
    grant BACKUP ANY TABLE to ONDEMAND;
    grant CREATE TABLE to ONDEMAND;
    grant DELETE ANY TABLE to ONDEMAND;
    grant DROP ANY TABLE to ONDEMAND;
    grant INSERT ANY TABLE to ONDEMAND;
    grant LOCK ANY TABLE to ONDEMAND;
    grant SELECT ANY TABLE to ONDEMAND;
    grant UPDATE ANY TABLE to ONDEMAND;
    -- Indexes
    grant CREATE ANY INDEX to ONDEMAND;
    grant DROP ANY INDEX to ONDEMAND;

    --
    -- Grant role & permissions to ARCHIVE user
    ---
    grant ONDEMAND to admin;
    grant UNLIMITED TABLESPACE to admin;
---
# Source: qar/templates/fts/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: qar-fts
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand-fts
data:
  token: ""
---
# Source: qar/templates/restapi/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: qar-restapi
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: restapi
---
# Source: qar/charts/oracledb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: qar-oracledb
  namespace: "default"
  labels:
    app.kubernetes.io/name: oracledb
    helm.sh/chart: oracledb-0.2.0
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: oracledb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "2Gi"
---
# Source: qar/templates/configmap-updater-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: qar-configmap-updater
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
rules:
- apiGroups: [""]
  resources: [configmaps]
  verbs:  [patch]
---
# Source: qar/templates/pod-reader-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: qar-pod-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
rules:
- apiGroups: [""]
  resources: [pods, services]
  verbs: [get, list, watch]
- apiGroups: [apps]
  resources: [deployments, statefulsets]
  verbs: [get, list, watch]
---
# Source: qar/templates/configmap-updater-rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: qar-configmap-updater
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qar-configmap-updater
subjects:
- kind: ServiceAccount
  name: qar
  namespace: "default"
---
# Source: qar/templates/pod-reader-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: qar-pod-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qar-pod-reader
subjects:
- kind: ServiceAccount
  name: qar
  namespace: "default"
---
# Source: qar/charts/oracledb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: qar-oracledb
  namespace: "default"
  labels:
    app.kubernetes.io/name: oracledb
    helm.sh/chart: oracledb-0.2.0
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: oracledb
spec:
  type: ClusterIP
  ports:
  - name: oracledb
    port: 1521
    targetPort: oracledb
    nodePort: null
  - name: emexpress
    port: 5500
    targetPort: emexpress
    nodePort: null
  selector:
    
    app.kubernetes.io/name: oracledb
    app.kubernetes.io/instance: qar
    app.kubernetes.io/component: ondemand
---
# Source: qar/templates/fts/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: qar-fts
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand-fts
spec:
  type: ClusterIP
  ports:
  - name: "fts"
    port: 9081
    targetPort: fts
    nodePort: null
  selector:
    
    app.kubernetes.io/name: qar
    app.kubernetes.io/instance: qar
    app.kubernetes.io/component: ondemand-fts
---
# Source: qar/templates/replicated/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: qar-ondemand-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: ondemand
    port: 1445
    targetPort: ondemand
  selector:
    
    app.kubernetes.io/name: qar
    app.kubernetes.io/instance: qar
    app.kubernetes.io/component: ondemand
---
# Source: qar/templates/replicated/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: qar-ondemand-%!i(int=0)
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
spec:
  type: ClusterIP
  ports:
  - name: "ondemand"
    port: 1445
    targetPort: ondemand
  selector:
    app.kubernetes.io/name: qar
    app.kubernetes.io/instance: qar
    app.kubernetes.io/component: ondemand
    statefulset.kubernetes.io/pod-name: qar-0
---
# Source: qar/templates/restapi/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: qar-restapi
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: restapi
spec:
  type: ClusterIP
  ports:
  - name: "http"
    port: 9080
    targetPort: http
    nodePort: null
  selector:
    
    app.kubernetes.io/name: qar
    app.kubernetes.io/instance: qar
    app.kubernetes.io/component: restapi
---
# Source: qar/charts/oracledb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qar-oracledb
  namespace: default
  labels:
    app.kubernetes.io/name: oracledb
    helm.sh/chart: oracledb-0.2.0
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: oracledb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: oracledb
      app.kubernetes.io/instance: qar
      app.kubernetes.io/component: oracledb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oracledb
        helm.sh/chart: oracledb-0.2.0
        app.kubernetes.io/instance: qar
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: oracledb
    spec:
      
      imagePullSecrets:
        - name: spt-registry
      serviceAccountName: qar-oracledb
      securityContext:
        fsGroup: 54321
      containers:
      - name: oracledb
        image: registry.sptcloud.com/oracle/database:21.3.0-ee
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
          runAsUser: 54321
        env:
        - name: ORACLE_PWD
          valueFrom:
            secretKeyRef:
              name: qar-oracledb
              key: password
        ports:
        - name: oracledb
          containerPort: 1521
        - name: emexpress
          containerPort: 5500
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 90
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: 1521
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 40
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
          exec:
            command: [/bin/sh, -c, "if [ -f $ORACLE_BASE/checkDBLockStatus.sh ]; then $ORACLE_BASE/checkDBLockStatus.sh; else $ORACLE_BASE/checkDBStatus.sh; fi"]
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: data
          mountPath: /opt/oracle/oradata
        - name: setup
          mountPath: /opt/oracle/scripts/setup
      volumes:
      - name: setup
        configMap:
          name: qar-db-init-scripts
      - name: data
        persistentVolumeClaim:
          claimName: qar-oracledb
---
# Source: qar/templates/arsload/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qar-arsload-hotfolder
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: arsload
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: qar
      app.kubernetes.io/instance: qar
      app.kubernetes.io/component: arsload
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qar
        helm.sh/chart: qar-0.2.5
        app.kubernetes.io/instance: qar
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: arsload
    spec:
      
      
      imagePullSecrets:
        - name: spt-registry
      serviceAccountName: qar
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
      - name: stash-file-init
        image: registry.sptcloud.com/qar/ondemand:10.5.0.5-oracle-ubi-8.8-854
        imagePullPolicy: IfNotPresent
        args: [/bin/sh, -c, "${QAR_HOME}/scripts/init-stash-file.sh"]
        env:
        - name: OD_USER
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: odUsername
        - name: OD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: odPassword
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
      - name: wait-for-ondemand
        image: ghcr.io/groundnuty/k8s-wait-for:no-root-v2.0
        imagePullPolicy: IfNotPresent
        args: ["pod", "-lapp.kubernetes.io/component=ondemand"]
      containers:
      - name: arsload-hotfolder
        image: registry.sptcloud.com/qar/ondemand:10.5.0.5-oracle-ubi-8.8-854
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
          runAsGroup: 1001
          runAsUser: 1001
        args: [start, arsload]
        env:
        - name: ARS_HOST
          value: qar-ondemand-headless.default.svc.cluster.local
        - name: ARS_PORT
          value: "1445"
        - name: ARSLOAD_PERIOD
          value: "30"
        - name: ARSLOAD_USER
          valueFrom:
            secretKeyRef:
              name: qar-arsload
              key: username
        - name: ARSLOAD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qar-arsload
              key: password
        - name: ARSLOAD_DIRECTORY
          value: /opt/qar/data/load
        - name: OD_INSTANCE_NAME
          value: ARCHIVE
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          exec:
            command: [ps, -p, 1]
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          exec:
            command: [/bin/sh, -c, "ps -p $(cat /tmp/qar/run/od.pid)"]
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
        - name: load
          mountPath: /opt/qar/data/load
      volumes:
      - name: work
        emptyDir: {}
      - name: load
        persistentVolumeClaim:
          claimName: arsload-hotfolder
---
# Source: qar/templates/fts/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qar-fts
  namespace: default
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: fts
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qar
      app.kubernetes.io/instance: qar
      app.kubernetes.io/component: fts
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qar
        helm.sh/chart: qar-0.2.5
        app.kubernetes.io/instance: qar
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: fts
    spec:
      
      
      imagePullSecrets:
        - name: spt-registry
      serviceAccountName: qar
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
      - name: wait-for-ondemand
        image: ghcr.io/groundnuty/k8s-wait-for:no-root-v2.0
        imagePullPolicy: IfNotPresent
        args: [pod, -lapp.kubernetes.io/component=ondemand]
      containers:
      - name: ondemand-fts
        image: registry.sptcloud.com/qar/ondemand-fts:10.5.0.5-ubi-8.8-854
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
          runAsGroup: 1001
          runAsUser: 1001
        env:
        - name: ARS_FTI_EXPORT_POLL_DELAY
          value: "300"
        
        - name: ARS_HOST
          value: qar-ondemand-headless.default.svc.cluster.local
        - name: ARS_NUM_DBSRVR
          value: "10"
        - name: ARS_PORT
          value: "1445"
        - name: ARS_SRVR_INSTANCE
          value: archive
        - name: ARS_STORAGE_MANAGER
          value: NO_TSM
        - name: ENABLE_TRACE
          value: "false"
        - name: OD_INSTANCE_NAME
          value: ARCHIVE
        
        - name: ORACLE_HOST
          value: qar-oracledb.default.svc.cluster.local
        - name: ORACLE_PORT
          value: "1521"
        - name: ORACLE_SERVICE_NAME
          value: archive
        - name: ORACLE_USER
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: dbUsername
        - name: ORACLE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: dbPassword
        
        - name: OD_USER
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: odUsername
        - name: OD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: odPassword
        ports:
          - name: fts
            containerPort: 9081
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          exec:
            command: [ps, -p, 1]
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          tcpSocket:
            port: 9081
        resources:
          limits: {}
          requests: {}
        volumeMounts:
          - name: work
            mountPath: /opt/qar/tmp
      volumes:
      - name: work
        emptyDir: {}
---
# Source: qar/templates/restapi/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qar-restapi
  namespace: default
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: restapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qar
      app.kubernetes.io/instance: qar
      app.kubernetes.io/component: restapi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qar
        helm.sh/chart: qar-0.2.5
        app.kubernetes.io/instance: qar
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: restapi
    spec:
      
      
      imagePullSecrets:
        - name: spt-registry
      serviceAccountName: qar
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
      - name: ondemand-restapi-init
        image: registry.sptcloud.com/qar/ondemand-restapi:10.5.0.5-liberty-23.0.0.5
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 0
        args: [/bin/sh, -c, "${QAR_HOME}/scripts/generate-rest-config.sh"]
        env:
        - name: OD_HOST
          value: qar-ondemand-headless.default.svc.cluster.local
        - name: OD_PORT
          value: "1445"
        - name: OD_INSTANCE_NAME
          value: ARCHIVE
        - name: OD_USER
          valueFrom:
            secretKeyRef:
              name: qar-restapi
              key: restUsername
        - name: OD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qar-restapi
              key: restPassword
        - name: REST_CONSUMER_NAME
          value: admin
        - name: REST_POOL_NAME
          value: odpool
        - name: RESTCFG_NAME
          value: qar-restapi
        volumeMounts:
        - name: restcfg-work
          mountPath: /opt/qar/config/rest/work
        - name: restcfg-stored
          mountPath: /opt/qar/config/rest/stored
      - name: wait-for-ondemand
        image: ghcr.io/groundnuty/k8s-wait-for:no-root-v2.0
        imagePullPolicy: IfNotPresent
        args: ["pod", "-lapp.kubernetes.io/component=ondemand"]
      containers:
      - name: qar-restapi
        image: registry.sptcloud.com/qar/ondemand-restapi:10.5.0.5-liberty-23.0.0.5
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
          runAsGroup: 1001
          runAsUser: 1001
        ports:
        - name: http
          containerPort: 9080
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          tcpSocket:
            port: 9080
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          httpGet:
            path: /qar/v1/documentation
            port: 9080
            scheme: HTTP
        volumeMounts:
        - name: restcfg-work
          mountPath: /opt/qar/config/rest/work
      volumes:
      - name: restcfg-work
        emptyDir: {}
      - name: restcfg-stored
        configMap:
          name: qar-restapi
---
# Source: qar/templates/replicated/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qar-ondemand
  namespace: default
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
spec:
  serviceName: qar-ondemand-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: qar
      app.kubernetes.io/instance: qar
      app.kubernetes.io/component: ondemand
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qar
        helm.sh/chart: qar-0.2.5
        app.kubernetes.io/instance: qar
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ondemand
    spec:
      
      
      imagePullSecrets:
        - name: spt-registry
      serviceAccountName: qar
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      imagePullSecrets:
      - name: spt-registry
      initContainers:
      - name: stash-file-init
        image: registry.sptcloud.com/qar/ondemand:10.5.0.5-oracle-ubi-8.8-854
        imagePullPolicy: IfNotPresent
        args: [/bin/sh", -c, "${QAR_HOME}/scripts/init-stash-file.sh"]
        env:
        - name: OD_USER
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: odUsername
        - name: OD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: odPassword
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
      - name: ondemand-fts-init
        image: registry.sptcloud.com/qar/ondemand-fts:10.5.0.5-ubi-8.8-854
        imagePullPolicy: IfNotPresent
        args: [init]
        env:
        - name: CONFIG_NAME
          value: qar-fts
        volumeMounts:
          - name: work
            mountPath: /opt/qar/tmp
      - name: wait-for-dbms
        image: ghcr.io/groundnuty/k8s-wait-for:no-root-v2.0
        imagePullPolicy: IfNotPresent
        args: [pod, -lrole=oracledb]
      containers:
      - name: ondemand
        image: registry.sptcloud.com/qar/ondemand:10.5.0.5-oracle-ubi-8.8-854
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
          runAsGroup: 1001
          runAsUser: 1001
        args: [start, library]
        env:
        - name: ARS_HOST
          value: qar-ondemand-headless.default.svc.cluster.local
        - name: ARS_NUM_DBSRVR
          value: "10"
        - name: ARS_PORT
          value: "1445"
        - name: ARS_SRVR_INSTANCE
          value: archive
        - name: ARS_STORAGE_MANAGER
          value: NO_TSM
        - name: ENABLE_TRACE
          value: "false"
        - name: OD_INSTANCE_NAME
          value: ARCHIVE
        - name: ORACLE_HOST
          value: qar-oracledb.default.svc.cluster.local
        - name: ORACLE_PORT
          value: "1521"
        - name: ORACLE_SERVICE_NAME
          value: archive
        - name: ORACLE_USER
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: dbUsername
        - name: ORACLE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qar-ondemand
              key: dbPassword
        ports:
        - name: ondemand
          containerPort: 1445
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 2
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          exec:
            command: [ps, -p, 1]
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 2
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
          exec:
            command: [/bin/sh, -c, "${OD_HOME}/bin/arssockd -h ${OD_INSTANCE_NAME} -P | grep -q Okay"]
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: work
          mountPath: /opt/qar/tmp
        - name: fti-config
          mountPath: /opt/qar/config/fti
        - name: data
          mountPath: /opt/qar/data
      volumes:
      - name: work
        emptyDir: {}
      - name: fti-config
        configMap:
          name: qar-fts
          items:
          - key: token
            path: fts.token
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: 2Gi
---
# Source: qar/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qar-ondemand
  namespace: "default"
  labels:
    app.kubernetes.io/name: qar
    helm.sh/chart: qar-0.2.5
    app.kubernetes.io/instance: qar
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ondemand
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-staging
    kubernetes.io/ingress.class: nginx
spec:
  tls:
    - hosts:
        - "foo.example.com"
      secretName: foo.example.com-tls
  rules:
    - host: "foo.example.com"
      http:
        paths:
          - path: 
            pathType: 
            backend:
              serviceName: qar-ondemand-headless
              servicePort: 1445
