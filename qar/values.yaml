# Global values for QAR

global:
  # -- Global image registry
  imageRegistry: ""
  # -- List of image repository pull secrets. Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # Example:
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  imagePullSecrets: []
  # -- Override the namespace for resources deployed by the chart (can itself be overridden by the local namespaceOverride).
  namespaceOverride: ""
  # -- StorageClass for all PersistentVolumes
  storageClass: ""
# Common parameters

# -- String to partially override the qar.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override the qar.fullname template
fullnameOverride: ""
# -- String to fully override the qar.namespace
namespaceOverride: ""
# -- Add labels to all the deployed resources (sub-charts are not considered). Evaluated as a template.
commonLabels: {}
# Common annotations to add to all QAR resources (sub-charts are not considered). Evaluated as a template.
commonAnnotations: {}

# ondemand deployment configuration
image:
  # -- OnDemand image registry
  registry: ""
  # -- OnDemand image repository
  repository: "qar/ondemand"
  # -- OnDemand image tab (immutable tag is recommended)
  tag: 10.5.0.5-oracle-ubi-8.8-854
  # -- OnDemand image digest in the format `sha256:aa....` (overrides `image.tag`)
  digest: ""
  # -- OnDemand image pull policy
  pullPolicy: IfNotPresent
  # -- Specify container registry Secrets as an array
  pullSecrets: []
# -- Defines the QAR server architecture (`standalone` or `replicated`).
architecture: standalone
# -- Set to `true` to use a StatefulSet instead of a Deployment (only applicable when `architecture=standalone`).
useStatefulSet: true
# -- Used in the header line of the `ars.ini` file to identify the name of the CMOD instance.
odInstanceName: ARCHIVE
# -- Identifies the name of the CMOD database (will be lower-cased for database creation).
# If not provided, the name `archive` will be used.
serverInstanceName: ARCHIVE
# -- Determines whether the server program is linked to a cache-only storage manager or an
# archive storage manager. Required on library servers. [TSM|NO_TSM|CACHE_ONLY]
storageManager: NO_TSM
trace:
  # -- Enables the OnDemand system trace facility
  enabled: false
auth:
  # -- Defines (in plain text) the name of the CMOD admin user. If left undefined, the default user
  # `admin` is created. Use the `auth.usernameSource` variable to define the username using an existing Secret.
  username: ""
  # -- Uses a Secret to define the CMOD administrative user.
  usernameSource:
    useSecret: false
    secretName: ""
    secretKey: ""
  # -- Defines (in plain text) the password of the CMOD admin user. If left undefined, the deployment
  # will generate a random alphanumeric password. Use the `auth.passwordSource` variable to
  # define the password using an existing Secret.
  password: ""
  # -- Uses a Secret to define the CMOD administrative user's password.
  passwordSource:
    useSecret: false
    secretName: ""
    secretKey: ""
db:
  # -- Specifies the DBMS used by the Library Server [DB2|ORACLE].
  engine: ORACLE
  # -- Defines the Oracle TNS service name for the CMOD database. If left undefined, the
  # lower-cased `serverInstanceName` value is used.
  tnsServiceName: ""
  # -- Determines the number of processes that CMOD starts on the library server to
  # handle connections to the database. Specify a value that supports the peak number
  # of concurrent database connections library server needs to handle.
  numSubServers: 10
  auth:
    # -- Defines (in plain text) the name of the administrative user to be created in the Oracle
    # database(s). If left undefined, the default user `archive` is created. Use the `auth.usernameSource`
    # variable to define the username using a Secret.
    username: ""
    # -- Uses a Secret to define the administrative user to be created in the Oracle database(s).
    usernameSource:
      useSecret: false
      secretName: ""
      secretKey: ""
    # -- Defines (in plain text) the password of the administrative user to be created in the
    # Oracle database(s). If left undefined, the deployment will generate a random alphanumeric
    # password. Use the `auth.passwordSource` variable to define the password using an existing Secret.
    password: ""
    # -- Uses a Secret to define the password of the administrative user to be created in the
    # Oracle database(s).
    passwordSource:
      useSecret: false
      secretName: ""
      secretKey: ""
# Zookeeper configuration
zookeeper:
  # -- Use Zookeeper to manage locking between multiple active CMOD server
  # server instances. This should be set to `true` when `replicaCount` > 1.
  enabled: false
  # -- List of Zookeeper servers to use.
  # Example:
  # servers:
  # - zoo1.example.com:2181
  # - zoo2.example.com:2181
  servers: []
  auth:
    # -- Defines (in plain text) the name of the Zookeeper user.
    # If left undefined, the default user `admin` is used. Use the `auth.usernameSource` variable
    # to define the username using a Secret.
    username: ""
    # -- Uses a Secret to define the Zookeeper user.
    usernameSource:
      useSecret: false
      secretName: ""
      secretKey: ""
    # -- Defines (in plain text) the Zookeeper user's password.
    # If left undefined, the deployment will generate a random alphanumeric password. Use the
    # `auth.passwordSource` variable to define the password using a Secret.
    password: ""
    # -- Uses a Secret to define the Zookeeper user's password.
    passwordSource:
      useSecret: false
      secretName: ""
      secretKey: ""

# -- Defines whether to create a batch job to perform initial setup processing (experimental).
performInitialSetup: false

# OnDemand statefulset parameters

# -- Annotations to be added to the OnDemand statefulset. Evaluated as a template.
annotations: {}
# -- Additional labels to be added to the OnDemand statefulset. Evaluated as a template.
labels: {}
# -- Defines the number of OnDemand nodes to be created after deployment.
replicaCount: 1
# -- Update strategy for the OnDemand statefulset
updateStrategy:
  type: RollingUpdate
# -- OnDemand Termination Grace Period
terminationGracePeriodSeconds: ""
# -- Enter the name of an existing service account to use. Otherwise, one will be created by default.
existingServiceAccount: ""
# -- OnDemand pod labels
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}
# -- OnDemand pod annotations
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  # -- Enable the OracleDB container security context.
  enabled: true
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsUser: 1001
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems.
  fsGroup: 1001
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  #  runAsNonRoot: true
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
containerSecurityContext:
  # -- Enable the OnDemand container security context.
  enabled: true
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged.
  privileged: false
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation.
  allowPrivilegeEscalation: false
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
  runAsUser: 1001
  # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities.
  runAsGroup: 1001
  # -- The default (recommended) configuration prohibits all Linux capabilities.
  capabilities:
    drop:
      - all
# Container ports
containerPorts:
  # -- OnDemand container port
  ondemand: 1445
# Learn about liveness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
# Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
livenessProbe:
  # -- Enable the OnDemand liveness probe.
  enabled: true
  # -- Initial delay before probing liveness
  initialDelaySeconds: 2
  # -- Period in seconds between liveness checks
  periodSeconds: 30
  # -- Timeout in seconds for liveness checks
  timeoutSeconds: 1
  # -- Number of consecutive negative tests before declaring failure
  failureThreshold: 3
  # -- Number of consecutive positive tests before counting it as a success
  successThreshold: 1
# Learn about readiness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
# Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
readinessProbe:
  # -- Enable the OnDemand readiness probe.
  enabled: true
  # -- Initial delay before probing readiness
  initialDelaySeconds: 2
  # -- Period in seconds between readiness checks
  periodSeconds: 30
  # -- Timeout in seconds for readiness checks
  timeoutSeconds: 1
  # -- Number of consecutive negative tests before declaring failure
  failureThreshold: 3
  # -- Number of consecutive positive tests before counting it as a success
  successThreshold: 1
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
resources:
  # Example:
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  limits: {}
  # Example:
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  requests: {}

# -- OnDemand service port
service:
  # -- Provide any additional annotations which may be required.
  annotations: {}
  # -- Defines the value for the Kubernetes service object [ClusterIP|LoadBalancer|NodePort].
  type: ClusterIP
  # -- Name of the service port
  portName: ondemand
  # Ports to expose on the service.
  ports:
    # -- OnDemand service port
    ondemand: 1445
  # NodePort value to assign (`service.type`` must be `NodePort` and not deploying statefulset.)
  # NOTE: choose port between <30000-32767>
  # ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  nodePorts:
    # -- Port to bind to for NodePort service type
    ondemand: ""
  headless:
    # -- Headless service annotations
    annotations: {}

ingress:
  # -- Enables Ingress, a Kubernetes API object that provides external access and load balancing.
  enabled: false
  # -- Provide any additional annotations which may be required.
  annotations: {}
  hosts:
    # -- Defines the host(s) for this Ingress.
    - host: ""
  # -- Defines the TLS-enabled host(s) and options.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

persistence:
  # -- Enable OnDemand Library server data persistence using a PVC.
  enabled: true
  # -- Name of an existing PVC to use.
  existingClaim: ""
  # -- Set to `keep` to avoid removing PVCs during a helm delete operation.
  resourcePolicy: ""
  # -- The path the volume will be mounted at.
  mountPath: /opt/qar/data
  # -- If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning.
  # If undefined (the default) or set to null, no storageClassName spec is
  # set, choosing the default provisioner. (gp2 on AWS, standard on GKE, AWS & OpenStack)
  storageClass: ""
  # -- PVC Access Mode for the CMOD data volume.
  accessModes:
    - ReadWriteOnce
  # -- PVC Storage Request for the CMOD data volume.
  size: 8Gi
  # -- Additional annotations, as required.
  annotations: {}
  # Tweaks for VolumeClaimTemplates
  volumeClaimTemplates:
    # -- A label query over volumes to consider for binding (e.g. when using local volumes)
    # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#labelselector-v1-meta
    selector: []
    # -- Custom PVC request attributes
    # ref https://cloud.ibm.com/docs/containers?topic=containers-file_storage#file_dynamic_statefulse
    requests: {}
    # -- Add a dataSource to the VolumeClaimTemplate
    dataSource: {}

# arsload deployment configuration
arsload:
  # -- Defines whether to deploy an ARSLOAD server.
  enabled: false
  auth:
    # -- Defines (in plain text) the name of the CMOD ARSLOAD user (for batch-loading documents).
    # If left undefined, the default user `admin` is used. Use the `auth.usernameSource` variable
    # to define the username using a Secret.
    username: ""
    # -- Uses a Secret to define the CMOD ARSLOAD user.
    usernameSource:
      useSecret: false
      secretName: ""
      secretKey: ""
    # -- Defines (in plain text) the password of the CMOD ARSLOAD user (for batch-loading documents).
    # If left undefined, the deployment will generate a random alphanumeric password. Use the
    # `auth.passwordSource` variable to define the user name using an existing Secret.
    password: ""
    # -- Uses a Secret to define the CMOD ARSLOAD user's password.
    passwordSource:
      useSecret: false
      secretName: ""
      secretKey: ""
  # -- Time interval in seconds to sleep (arsload command defaults to 600)
  timeInterval: 600
  # -- List of arsload deployment instances (one replica per input volume).
  instances:
    # - name: folder1
    #   # -- Name of an existing PVC to use (required).
    #   existingClaim: "folder1-pvc"
    #   # -- The path the volume will be mounted at in the ARSLOAD container.
    #   # Defaults to /opt/qar/data/load.
    #   mountPath: /opt/qar/data/load
  # -- Annotations to be added to the OnDemand statefulset. Evaluated as a template.
  annotations: {}
  # -- Additional labels to be added to the OnDemand statefulset. Evaluated as a template.
  labels: {}
  # -- Update strategy for the ARSLOAD deployment
  updateStrategy:
    type: Recreate
  # -- ARSLOAD Termination Grace Period
  terminationGracePeriodSeconds: ""
  # -- ARSLOAD pod labels
  # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  # -- ARSLOAD pod annotations
  # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  podSecurityContext:
    # -- Enable the ARSLOAD pod security context.
    enabled: true
    # -- ARSLOAD pod security context runAsUser.
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    runAsUser: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems.
    fsGroup: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    #  runAsNonRoot: true
  # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext:
    # -- Enable the ARSLOAD container security context.
    enabled: true
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged.
    privileged: false
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation.
    allowPrivilegeEscalation: false
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    runAsUser: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities.
    runAsGroup: 1001
    # -- The default (recommended) configuration prohibits all Linux capabilities.
    capabilities:
      drop:
        - all
  # Learn about liveness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  # Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
  livenessProbe:
    # -- Enable the ARSLOAD liveness probe.
    enabled: true
    # -- Initial delay before probing liveness
    initialDelaySeconds: 5
    # -- Period in seconds between liveness checks
    periodSeconds: 30
    # -- Timeout in seconds for liveness checks
    timeoutSeconds: 1
    # -- Number of consecutive negative tests before declaring failure
    failureThreshold: 5
    # -- Number of consecutive positive tests before counting it as a success
    successThreshold: 1
  # Learn about readiness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  # Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
  readinessProbe:
    # -- Enable the ARSLOAD readiness probe.
    enabled: true
    # -- Initial delay before probing readiness
    initialDelaySeconds: 10
    # -- Period in seconds between readiness checks
    periodSeconds: 30
    # -- Timeout in seconds for readiness checks
    timeoutSeconds: 1
    # -- Number of consecutive negative tests before declaring failure
    failureThreshold: 5
    # -- Number of consecutive positive tests before counting it as a success
    successThreshold: 1
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources:
    # Example:
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    limits: {}
    # Example:
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}

restapi:
  # -- Defines whether to deploy a REST API server.
  enabled: false
  image:
    # -- OnDemand REST API image registry
    registry: ""
    # -- OnDemand REST API image repository
    repository: "qar/ondemand-restapi"
    # -- OnDemand REST API image tab (immutable tag is recommended)
    tag: 10.5.0.5-liberty-23.0.0.5
    # -- OnDemand REST API image digest in the format `sha256:aa....` (overrides `image.tag`)
    digest: ""
    # -- OnDemand REST API image pull policy
    pullPolicy: IfNotPresent
    # -- Specify container registry Secrets as an array
    pullSecrets: []
  auth:
    # -- Defines (in plain text) the name of the CMOD user (consumer) to use when generating the REST configuration
    # (OD access pool). If left undefined, the default user `admin` is used. Use the `auth.usernameSource`
    # variable to define the username using a Secret.
    username: ""
    # -- Uses a Secret to define the CMOD REST API user (consumer) used when generating the REST configuration.
    usernameSource:
      useSecret: false
      secretName: ""
      secretKey: ""
    # -- Defines (in plain text) the password of the CMOD user (consumer) to use when generating the REST configuration
    # (OD access pool). If left undefined, the deployment will generate a random alphanumeric password. Use
    # the `auth.passwordSource` variable to define the user name using an existing Secret.
    password: ""
    # -- Uses a Secret to define the CMOD REST API user's (consumer's) password.
    passwordSource:
      useSecret: false
      secretName: ""
      secretKey: ""
  # -- Name of the REST connection pool to create. Defaults to `odpool` if blank.
  poolName: ""
  # -- Name of the REST consumer to create for the pool. Defaults to `admin` if blank.
  consumerName: ""

  # -- Annotations to be added to the REST API server. Evaluated as a template.
  annotations: {}
  # -- Additional labels to be added to the REST API server. Evaluated as a template.
  labels: {}
  # -- Defines the number of REST API nodes to be created after deployment.
  replicaCount: 1
  # -- Update strategy for the REST API deployment
  updateStrategy: {}
  # -- ARSLOAD Termination Grace Period
  terminationGracePeriodSeconds: ""
  # -- Provides the ability to customize the deployment using Kubernetes annotations.
  podAnnotations: {}

  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  podSecurityContext:
    # -- Enable the ARSLOAD pod security context.
    enabled: true
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    runAsUser: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems.
    fsGroup: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    #  runAsNonRoot: true

  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  generateConfigSecurityContext:
    # -- Enable the ARSLOAD container security context.
    enabled: true
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    runAsUser: 0
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext:
    # -- Enable the ARSLOAD container security context.
    enabled: true
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged.
    privileged: false
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation.
    allowPrivilegeEscalation: false
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    runAsUser: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities.
    runAsGroup: 1001
    # -- The default (recommended) configuration prohibits all Linux capabilities.
    capabilities:
      drop:
        - all

  # Container ports
  containerPorts:
    # -- REST API (WAS) container port
    http: 9080

  service:
    # -- Provide any additional annotations which may be required.
    annotations: {}
    # -- Defines the value for the Kubernetes service object [ClusterIP|LoadBalancer|NodePort].
    type: ClusterIP
    # -- Name of the service port
    portName: http
    # Ports to expose on the service
    ports:
      # -- REST API (WAS) service port
      http: 9080
    # NodePort value to assign (.service.type must be `NodePort`).
    # NOTE: choose port between <30000-32767>
    # ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    nodePorts:
      # -- Node port for the REST API (WAS) server
      http: ""

  # Learn about liveness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  # Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
  livenessProbe:
    # -- Enable the REST API server liveness probe
    enabled: true
    # -- Initial delay before probing liveness
    initialDelaySeconds: 5
    # -- Period in seconds between liveness checks
    periodSeconds: 30
    # -- Timeout in seconds for liveness checks
    timeoutSeconds: 1
    # -- Number of consecutive negative tests before declaring failure
    failureThreshold: 5
    # -- Number of consecutive positive tests before counting it as a success
    successThreshold: 1

  # Learn about readiness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  # Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
  readinessProbe:
    # -- Enable the REST API server readiness probe
    enabled: true
    # -- Initial delay before probing readiness
    initialDelaySeconds: 10
    # -- Period in seconds between readiness checks
    periodSeconds: 30
    # -- Timeout in seconds for readiness checks
    timeoutSeconds: 1
    # -- Number of consecutive negative tests before declaring failure
    failureThreshold: 5
    # -- Number of consecutive positive tests before counting it as a success
    successThreshold: 1

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources:
    # Example:
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    limits: {}
    # Example:
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}

  ingress:
    # -- Enables Ingress, a Kubernetes API object that provides external access and load balancing.
    enabled: false
    # -- Provide any additional annotations which may be required.
    annotations: {}
    hosts:
      # -- Defines the host(s) for this Ingress.
      - host: ""
    # -- Defines the TLS-enabled host(s) and options.
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

fts:
  # -- Defines whether to enable Full-Text Search.
  enabled: false
  image:
    # -- OnDemand Full Text Search image registry
    registry: ""
    # -- OnDemand Full Text Search image repository
    repository: "qar/ondemand-fts"
    # -- OnDemand Full Text Search image tab (immutable tag is recommended)
    tag: 10.5.0.5-ubi-8.8-854
    # -- OnDemand Full Text Search image digest in the format `sha256:aa....` (overrides `image.tag`)
    digest: ""
    # -- OnDemand Full Text Search image pull policy
    pullPolicy: IfNotPresent
    # -- Specify container registry Secrets as an array
    pullSecrets: []
  # -- Full-text index export process polling/sleep interval (in seconds)
  exportPollDelay: 180

  # -- Annotations to be added to the FTS server. Evaluated as a template.
  annotations: {}
  # -- Additional labels to be added to the FTS server. Evaluated as a template.
  labels: {}
  # -- Defines the number of FTS nodes to be created after deployment.
  replicaCount: 1
  # -- Update strategy for the fTS deployment
  updateStrategy: {}
  # -- FTS Termination Grace Period
  terminationGracePeriodSeconds: ""
  # -- Provides the ability to customize the deployment using Kubernetes annotations.
  podAnnotations: {}

  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  podSecurityContext:
    # -- Enable the FTS pod security context.
    enabled: true
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    runAsUser: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems.
    fsGroup: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    #  runAsNonRoot: true

  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext:
    # -- Enable the FTS container security context.
    enabled: true
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged.
    privileged: false
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation.
    allowPrivilegeEscalation: false
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups.
    runAsUser: 1001
    # -- ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities.
    runAsGroup: 1001
    # -- The default (recommended) configuration prohibits all Linux capabilities.
    capabilities:
      drop:
        - all

  # Container ports
  containerPorts:
    # -- fTS container port
    fts: 9081

  # FTS service parameters
  service:
    # -- Provide any additional annotations which may be required.
    annotations: {}
    # -- Defines the value for the Kubernetes service object [ClusterIP|LoadBalancer|NodePort].
    type: ClusterIP
    # -- Name of the service port
    portName: fts
    # Ports to expose on the service
    ports:
      # -- FTS service port
      fts: 9081
    # NodePort value to assign (.service.type must be `NodePort`).
    # NOTE: choose port between <30000-32767>
    # ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    nodePorts:
      # -- NodePort to expose for FTS
      fts: ""

  # Learn about liveness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  # Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
  livenessProbe:
    # -- Enable the FTS server liveness probe
    enabled: true
    # -- Initial delay before probing liveness
    initialDelaySeconds: 5
    # -- Period in seconds between liveness checks
    periodSeconds: 30
    # -- Timeout in seconds for liveness checks
    timeoutSeconds: 1
    # -- Number of consecutive negative tests before declaring failure
    failureThreshold: 5
    # -- Number of consecutive positive tests before counting it as a success
    successThreshold: 1

  # Learn about readiness probes at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/.
  # Learn about the probe's configuration settings at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes.
  readinessProbe:
    # -- Enable the FTS server readiness probe
    enabled: true
    # -- Initial delay before probing readiness
    initialDelaySeconds: 10
    # -- Period in seconds between readiness checks
    periodSeconds: 30
    # -- Timeout in seconds for readiness checks
    timeoutSeconds: 1
    # -- Number of consecutive negative tests before declaring failure
    failureThreshold: 5
    # -- Number of consecutive positive tests before counting it as a success
    successThreshold: 1

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  resources:
    # Example:
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    limits: {}
    # Example:
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}

navigator:
  # -- Defines whether to deploy a Content Navigator server. [Not Implemented Yet]
  enabled: false

# Learn about k8s-wait-for at https://github.com/groundnuty/k8s-wait-for
wait:
  image:
    # -- Defines the name of the k8s-wait-for image stored in a container repository.
    name: ghcr.io/groundnuty/k8s-wait-for
    # -- Specifies the version tag to use.
    tag: no-root-v2.0
    # -- Specifies the pull policy to use.
    pullPolicy: IfNotPresent
